name: Create Release

on:
  push:
    tags:
      - 'v*' # Trigger on version tags like v1.0, v2.1.3, etc.

jobs:
  build:
    name: Build for ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Racket
        uses: Bogdanp/setup-racket@v1.11
        with:
          architecture: 'x64' # Assumes x64 for all OS for now
          distribution: 'full'
          variant: 'CS'
          version: '8.16'

      - name: DEBUG Show Workflow File
        run: cat .github/workflows/ci.yml
        shell: bash

      - name: Link local package
        run: raco pkg install --batch

      - name: Build release binaries (Linux/macOS)
        if: runner.os == 'Linux' || runner.os == 'macOS'
        run: |
          raco exe --output apollo-binary src/apollo/main.rkt
          cp apollo-binary apollo-rojo
          cp apollo-binary build-exe
        # Ensure this script places apollo-binary, apollo-rojo, build-exe in the root

      - name: Build release binaries (Windows)
        if: runner.os == 'Windows'
        # TODO: Replace with your actual Windows build command (e.g., PowerShell)
        # Ensure this script places apollo-binary.exe, apollo-rojo.exe, build-exe.exe in the root
        run: |
          raco exe --output apollo-binary src/apollo/main.rkt
          # raco exe adds .exe automatically on Windows
          Copy-Item apollo-binary.exe apollo-rojo.exe
          Copy-Item apollo-binary.exe build-exe.exe
        shell: pwsh # Use PowerShell for Copy-Item

      # TODO: Adjust paths and names if your build script outputs differently or with extensions
      - name: Upload Artifacts (Linux/macOS)
        if: runner.os == 'Linux' || runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.os }}
          path: |
            apollo-binary
            apollo-rojo
            build-exe
          retention-days: 1 # Keep artifacts only briefly

      - name: Upload Artifacts (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.os }}
          # Assuming .exe extensions are added by the build process
          path: |
            apollo-binary.exe
            apollo-rojo.exe
            build-exe.exe
          retention-days: 1 # Keep artifacts only briefly

  release:
    name: Create GitHub Release
    needs: build # Run after all builds are complete
    runs-on: ubuntu-latest # The OS for the release step doesn't matter much
    permissions:
      contents: write # Needed to create releases

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for release note generation

      - name: Create download directory
        run: mkdir -p release-assets

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets # Download all artifacts into this directory
          # Artifacts will be in subdirectories like release-assets/binaries-ubuntu-latest/

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          # Use a glob pattern to upload all files from the artifact subdirectories
          artifacts: release-assets/**/*
          token: ${{ secrets.GITHUB_TOKEN }}
          generateReleaseNotes: true 