import{_ as s,c as i,o as e,ae as a}from"./chunks/framework.cCdmFsMI.js";const k=JSON.parse('{"title":"Standard Library Reference","description":"","frontmatter":{},"headers":[],"relativePath":"reference/stdlib.md","filePath":"reference/stdlib.md"}'),d={name:"reference/stdlib.md"};function n(r,t,l,o,h,p){return e(),i("div",null,t[0]||(t[0]=[a(`<h1 id="standard-library-reference" tabindex="-1">Standard Library Reference <a class="header-anchor" href="#standard-library-reference" aria-label="Permalink to &quot;Standard Library Reference&quot;">​</a></h1><p>This document provides a complete reference for Apollo&#39;s standard library functions and their Luau equivalents.</p><h2 id="core-functions" tabindex="-1">Core Functions <a class="header-anchor" href="#core-functions" aria-label="Permalink to &quot;Core Functions&quot;">​</a></h2><h3 id="math-operations" tabindex="-1">Math Operations <a class="header-anchor" href="#math-operations" aria-label="Permalink to &quot;Math Operations&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Racket</th><th>Luau</th><th>Description</th></tr></thead><tbody><tr><td><code>+</code></td><td><code>+</code></td><td>Addition</td></tr><tr><td><code>-</code></td><td><code>-</code></td><td>Subtraction</td></tr><tr><td><code>*</code></td><td><code>*</code></td><td>Multiplication</td></tr><tr><td><code>/</code></td><td><code>/</code></td><td>Division</td></tr><tr><td><code>modulo</code></td><td><code>%</code></td><td>Modulo</td></tr><tr><td><code>expt</code></td><td><code>^</code></td><td>Exponentiation</td></tr></tbody></table><h3 id="string-operations" tabindex="-1">String Operations <a class="header-anchor" href="#string-operations" aria-label="Permalink to &quot;String Operations&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Racket</th><th>Luau</th><th>Description</th></tr></thead><tbody><tr><td><code>string-append</code></td><td><code>..</code></td><td>String concatenation</td></tr><tr><td><code>string-length</code></td><td><code>#</code></td><td>String length</td></tr><tr><td><code>substring</code></td><td><code>string.sub</code></td><td>Substring extraction</td></tr><tr><td><code>string-upcase</code></td><td><code>string.upper</code></td><td>Convert to uppercase</td></tr><tr><td><code>string-downcase</code></td><td><code>string.lower</code></td><td>Convert to lowercase</td></tr></tbody></table><h3 id="list-operations" tabindex="-1">List Operations <a class="header-anchor" href="#list-operations" aria-label="Permalink to &quot;List Operations&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Racket</th><th>Luau</th><th>Description</th></tr></thead><tbody><tr><td><code>cons</code></td><td><code>table.insert</code></td><td>Add to front</td></tr><tr><td><code>append</code></td><td><code>table.insert</code></td><td>Add to end</td></tr><tr><td><code>car</code></td><td><code>[1]</code></td><td>First element</td></tr><tr><td><code>cdr</code></td><td><code>{select(2, ...)}</code></td><td>Rest of list</td></tr><tr><td><code>length</code></td><td><code>#</code></td><td>List length</td></tr></tbody></table><h2 id="type-predicates" tabindex="-1">Type Predicates <a class="header-anchor" href="#type-predicates" aria-label="Permalink to &quot;Type Predicates&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Racket</th><th>Luau</th><th>Description</th></tr></thead><tbody><tr><td><code>number?</code></td><td><code>type(x) == &quot;number&quot;</code></td><td>Check for number</td></tr><tr><td><code>string?</code></td><td><code>type(x) == &quot;string&quot;</code></td><td>Check for string</td></tr><tr><td><code>boolean?</code></td><td><code>type(x) == &quot;boolean&quot;</code></td><td>Check for boolean</td></tr><tr><td><code>list?</code></td><td><code>type(x) == &quot;table&quot;</code></td><td>Check for list</td></tr><tr><td><code>null?</code></td><td><code>x == nil</code></td><td>Check for null</td></tr></tbody></table><h2 id="i-o-operations" tabindex="-1">I/O Operations <a class="header-anchor" href="#i-o-operations" aria-label="Permalink to &quot;I/O Operations&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Racket</th><th>Luau</th><th>Description</th></tr></thead><tbody><tr><td><code>display</code></td><td><code>print</code></td><td>Print to console</td></tr><tr><td><code>printf</code></td><td><code>string.format</code></td><td>Formatted printing</td></tr><tr><td><code>read</code></td><td><code>io.read</code></td><td>Read input</td></tr></tbody></table><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><div class="language-racket vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">racket</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; Racket</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">define</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sum-list</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> lst</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foldl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lst))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">define</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">greet</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string-append</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- Generated Luau</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sumList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lst: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): number</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> table.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fold</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lst, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(acc, x) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> acc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): string</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, &quot; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;!&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><h2 id="notes" tabindex="-1">Notes <a class="header-anchor" href="#notes" aria-label="Permalink to &quot;Notes&quot;">​</a></h2><ul><li>Some Racket functions may have slightly different behavior in Luau</li><li>Not all Racket standard library functions are supported</li><li>Custom implementations may be needed for some operations</li></ul><h2 id="see-also" tabindex="-1">See Also <a class="header-anchor" href="#see-also" aria-label="Permalink to &quot;See Also&quot;">​</a></h2><ul><li><a href="./../explanation/type-system.html">Type System</a></li><li><a href="./../reference/errors.html">Error Messages</a></li></ul>`,20)]))}const u=s(d,[["render",n]]);export{k as __pageData,u as default};
