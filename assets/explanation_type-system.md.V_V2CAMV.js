import{_ as s,c as a,o as n,ae as e}from"./chunks/framework.cCdmFsMI.js";const o=JSON.parse('{"title":"Type System","description":"","frontmatter":{},"headers":[],"relativePath":"explanation/type-system.md","filePath":"explanation/type-system.md"}'),t={name:"explanation/type-system.md"};function l(p,i,h,k,r,E){return n(),a("div",null,i[0]||(i[0]=[e(`<h1 id="type-system" tabindex="-1">Type System <a class="header-anchor" href="#type-system" aria-label="Permalink to &quot;Type System&quot;">​</a></h1><p>This document explains Apollo&#39;s type system and how it handles types during compilation.</p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>Apollo&#39;s type system is based on Racket&#39;s type system with some modifications for Luau compatibility:</p><ol><li><p><strong>Static Types</strong></p><ul><li>Basic types (Number, String, Boolean)</li><li>Compound types (List, Struct)</li><li>Function types</li><li>Union types</li></ul></li><li><p><strong>Dynamic Types</strong></p><ul><li>Any type</li><li>Optional types</li><li>Variadic types</li></ul></li><li><p><strong>Type Inference</strong></p><ul><li>Local type inference</li><li>Global type inference</li><li>Type constraints</li></ul></li></ol><h2 id="type-hierarchy" tabindex="-1">Type Hierarchy <a class="header-anchor" href="#type-hierarchy" aria-label="Permalink to &quot;Type Hierarchy&quot;">​</a></h2><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">graph TD</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A[Type] --&gt; B[Static Type]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A --&gt; C[Dynamic Type]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt; D[Basic Type]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt; E[Compound Type]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt; F[Function Type]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    D --&gt; G[Number]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    D --&gt; H[String]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    D --&gt; I[Boolean]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    E --&gt; J[List]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    E --&gt; K[Struct]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    C --&gt; L[Any]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    C --&gt; M[Optional]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    C --&gt; N[Variadic]</span></span></code></pre></div><h2 id="type-definitions" tabindex="-1">Type Definitions <a class="header-anchor" href="#type-definitions" aria-label="Permalink to &quot;Type Definitions&quot;">​</a></h2><h3 id="basic-types" tabindex="-1">Basic Types <a class="header-anchor" href="#basic-types" aria-label="Permalink to &quot;Basic Types&quot;">​</a></h3><div class="language-racket vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">racket</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; Number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">define</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : Number </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">define</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : String </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; Boolean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">define</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : Boolean </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="compound-types" tabindex="-1">Compound Types <a class="header-anchor" href="#compound-types" aria-label="Permalink to &quot;Compound Types&quot;">​</a></h3><div class="language-racket vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">racket</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; List</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">define</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> lst</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : (List Number) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; Struct</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ([x : Number] [y : Number]))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">define</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : point (point </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><h3 id="function-types" tabindex="-1">Function Types <a class="header-anchor" href="#function-types" aria-label="Permalink to &quot;Function Types&quot;">​</a></h3><div class="language-racket vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">racket</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; Simple function</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">define</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : Number] [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : Number]) : Number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x y))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; Higher-order function</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">define</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Number Number)] [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">lst</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : (List Number)]) : (List Number)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f lst))</span></span></code></pre></div><h3 id="union-types" tabindex="-1">Union Types <a class="header-anchor" href="#union-types" aria-label="Permalink to &quot;Union Types&quot;">​</a></h3><div class="language-racket vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">racket</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; Union type</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">define</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse-number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : String]) : (U Number </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ([n (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string-&gt;number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s)])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n n </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)))</span></span></code></pre></div><h2 id="type-inference" tabindex="-1">Type Inference <a class="header-anchor" href="#type-inference" aria-label="Permalink to &quot;Type Inference&quot;">​</a></h2><h3 id="local-inference" tabindex="-1">Local Inference <a class="header-anchor" href="#local-inference" aria-label="Permalink to &quot;Local Inference&quot;">​</a></h3><div class="language-racket vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">racket</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; Types inferred from context</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">define</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">square</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x x))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; x inferred as Number</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">define</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">concat</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> s1</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> s2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string-append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s1 s2))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; s1, s2 inferred as String</span></span></code></pre></div><h3 id="global-inference" tabindex="-1">Global Inference <a class="header-anchor" href="#global-inference" aria-label="Permalink to &quot;Global Inference&quot;">​</a></h3><div class="language-racket vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">racket</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; Types inferred across functions</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">define</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">f</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (g x))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; x&#39;s type inferred from g&#39;s parameter type</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">define</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">g</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; y must be Number</span></span></code></pre></div><h3 id="type-constraints" tabindex="-1">Type Constraints <a class="header-anchor" href="#type-constraints" aria-label="Permalink to &quot;Type Constraints&quot;">​</a></h3><div class="language-racket vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">racket</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; Type constraints</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">define</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">min</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : Number] [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : Number]) : Number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x y) x y))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; Type variables</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">define</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">identity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : A]) : A</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  x)</span></span></code></pre></div><h2 id="type-checking" tabindex="-1">Type Checking <a class="header-anchor" href="#type-checking" aria-label="Permalink to &quot;Type Checking&quot;">​</a></h2><h3 id="static-checking" tabindex="-1">Static Checking <a class="header-anchor" href="#static-checking" aria-label="Permalink to &quot;Static Checking&quot;">​</a></h3><ol><li><p><strong>Type Rules</strong></p><ul><li>Subtyping</li><li>Type equivalence</li><li>Type compatibility</li></ul></li><li><p><strong>Error Detection</strong></p><ul><li>Type mismatches</li><li>Undefined variables</li><li>Invalid operations</li></ul></li></ol><h3 id="runtime-checking" tabindex="-1">Runtime Checking <a class="header-anchor" href="#runtime-checking" aria-label="Permalink to &quot;Runtime Checking&quot;">​</a></h3><ol><li><p><strong>Contracts</strong></p><ul><li>Function contracts</li><li>Struct contracts</li><li>Dynamic checks</li></ul></li><li><p><strong>Error Handling</strong></p><ul><li>Contract violations</li><li>Type assertions</li><li>Error messages</li></ul></li></ol><h2 id="type-safety" tabindex="-1">Type Safety <a class="header-anchor" href="#type-safety" aria-label="Permalink to &quot;Type Safety&quot;">​</a></h2><h3 id="guarantees" tabindex="-1">Guarantees <a class="header-anchor" href="#guarantees" aria-label="Permalink to &quot;Guarantees&quot;">​</a></h3><ol><li><p><strong>Static Safety</strong></p><ul><li>No type errors at runtime</li><li>Complete type coverage</li><li>Sound type system</li></ul></li><li><p><strong>Runtime Safety</strong></p><ul><li>Contract enforcement</li><li>Null safety</li><li>Memory safety</li></ul></li></ol><h3 id="limitations" tabindex="-1">Limitations <a class="header-anchor" href="#limitations" aria-label="Permalink to &quot;Limitations&quot;">​</a></h3><ol><li><p><strong>Static Limitations</strong></p><ul><li>Undecidable types</li><li>Complex type inference</li><li>Performance overhead</li></ul></li><li><p><strong>Runtime Limitations</strong></p><ul><li>Contract overhead</li><li>Dynamic features</li><li>Memory usage</li></ul></li></ol><h2 id="best-practices" tabindex="-1">Best Practices <a class="header-anchor" href="#best-practices" aria-label="Permalink to &quot;Best Practices&quot;">​</a></h2><h3 id="type-annotations" tabindex="-1">Type Annotations <a class="header-anchor" href="#type-annotations" aria-label="Permalink to &quot;Type Annotations&quot;">​</a></h3><ol><li><p><strong>When to Annotate</strong></p><ul><li>Public APIs</li><li>Complex functions</li><li>Performance-critical code</li></ul></li><li><p><strong>Annotation Style</strong></p><ul><li>Be explicit</li><li>Use meaningful names</li><li>Document assumptions</li></ul></li></ol><h3 id="type-design" tabindex="-1">Type Design <a class="header-anchor" href="#type-design" aria-label="Permalink to &quot;Type Design&quot;">​</a></h3><ol><li><p><strong>Type Hierarchy</strong></p><ul><li>Keep it simple</li><li>Avoid deep nesting</li><li>Use appropriate types</li></ul></li><li><p><strong>Type Abstractions</strong></p><ul><li>Use interfaces</li><li>Hide implementation</li><li>Document behavior</li></ul></li></ol><h2 id="see-also" tabindex="-1">See Also <a class="header-anchor" href="#see-also" aria-label="Permalink to &quot;See Also&quot;">​</a></h2><ul><li><a href="./../explanation/compilation.html">Compilation Process</a></li><li><a href="./../explanation/architecture.html">Architecture Overview</a></li><li><a href="./../reference/config.html">Configuration Reference</a></li></ul>`,40)]))}const y=s(t,[["render",l]]);export{o as __pageData,y as default};
