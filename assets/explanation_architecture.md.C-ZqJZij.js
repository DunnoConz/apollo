import{_ as i,c as a,o as t,ae as l}from"./chunks/framework.cCdmFsMI.js";const u=JSON.parse('{"title":"Architecture Overview","description":"","frontmatter":{},"headers":[],"relativePath":"explanation/architecture.md","filePath":"explanation/architecture.md"}'),r={name:"explanation/architecture.md"};function n(o,e,s,p,c,h){return t(),a("div",null,e[0]||(e[0]=[l(`<h1 id="architecture-overview" tabindex="-1">Architecture Overview <a class="header-anchor" href="#architecture-overview" aria-label="Permalink to &quot;Architecture Overview&quot;">​</a></h1><p>This document explains the architecture of the Apollo compiler.</p><h2 id="system-components" tabindex="-1">System Components <a class="header-anchor" href="#system-components" aria-label="Permalink to &quot;System Components&quot;">​</a></h2><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">graph TD</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A[Source Code] --&gt; B[Parser]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt; C[AST]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    C --&gt; D[Macro Expander]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    D --&gt; E[Type Checker]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    E --&gt; F[Optimizer]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    F --&gt; G[Code Generator]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    G --&gt; H[Luau Code]</span></span></code></pre></div><h2 id="component-details" tabindex="-1">Component Details <a class="header-anchor" href="#component-details" aria-label="Permalink to &quot;Component Details&quot;">​</a></h2><h3 id="_1-parser" tabindex="-1">1. Parser <a class="header-anchor" href="#_1-parser" aria-label="Permalink to &quot;1. Parser&quot;">​</a></h3><p>The parser converts Racket source code into an abstract syntax tree (AST).</p><p><strong>Key Features:</strong></p><ul><li>Handles Racket syntax</li><li>Preserves source locations</li><li>Supports language extensions</li></ul><h3 id="_2-macro-expander" tabindex="-1">2. Macro Expander <a class="header-anchor" href="#_2-macro-expander" aria-label="Permalink to &quot;2. Macro Expander&quot;">​</a></h3><p>Expands macros before type checking.</p><p><strong>Key Features:</strong></p><ul><li>Supports Racket&#39;s macro system</li><li>Handles hygiene</li><li>Preserves source locations</li></ul><h3 id="_3-type-checker" tabindex="-1">3. Type Checker <a class="header-anchor" href="#_3-type-checker" aria-label="Permalink to &quot;3. Type Checker&quot;">​</a></h3><p>Performs type inference and checking.</p><p><strong>Key Features:</strong></p><ul><li>Gradual typing</li><li>Type inference</li><li>Runtime type checks</li><li>Error reporting</li></ul><h3 id="_4-optimizer" tabindex="-1">4. Optimizer <a class="header-anchor" href="#_4-optimizer" aria-label="Permalink to &quot;4. Optimizer&quot;">​</a></h3><p>Applies optimizations to the AST.</p><p><strong>Key Features:</strong></p><ul><li>Constant folding</li><li>Dead code elimination</li><li>Inline expansion</li><li>Type-specific optimizations</li></ul><h3 id="_5-code-generator" tabindex="-1">5. Code Generator <a class="header-anchor" href="#_5-code-generator" aria-label="Permalink to &quot;5. Code Generator&quot;">​</a></h3><p>Generates Luau code from the optimized AST.</p><p><strong>Key Features:</strong></p><ul><li>Target-specific code generation</li><li>Source map generation</li><li>Error handling</li><li>Performance optimizations</li></ul><h2 id="data-flow" tabindex="-1">Data Flow <a class="header-anchor" href="#data-flow" aria-label="Permalink to &quot;Data Flow&quot;">​</a></h2><ol><li><p><strong>Source Code → AST</strong></p><ul><li>Parsing</li><li>Syntax validation</li><li>Source location tracking</li></ul></li><li><p><strong>AST → Expanded AST</strong></p><ul><li>Macro expansion</li><li>Syntax transformation</li><li>Hygiene maintenance</li></ul></li><li><p><strong>Expanded AST → Typed AST</strong></p><ul><li>Type inference</li><li>Type checking</li><li>Error reporting</li></ul></li><li><p><strong>Typed AST → Optimized AST</strong></p><ul><li>Optimization passes</li><li>Transformation</li><li>Analysis</li></ul></li><li><p><strong>Optimized AST → Luau Code</strong></p><ul><li>Code generation</li><li>Source maps</li><li>Error handling</li></ul></li></ol><h2 id="design-decisions" tabindex="-1">Design Decisions <a class="header-anchor" href="#design-decisions" aria-label="Permalink to &quot;Design Decisions&quot;">​</a></h2><h3 id="_1-type-system" tabindex="-1">1. Type System <a class="header-anchor" href="#_1-type-system" aria-label="Permalink to &quot;1. Type System&quot;">​</a></h3><p><strong>Decision:</strong> Implement gradual typing <strong>Rationale:</strong></p><ul><li>Compatibility with Racket</li><li>Flexibility for users</li><li>Safety when needed</li></ul><h3 id="_2-optimization-strategy" tabindex="-1">2. Optimization Strategy <a class="header-anchor" href="#_2-optimization-strategy" aria-label="Permalink to &quot;2. Optimization Strategy&quot;">​</a></h3><p><strong>Decision:</strong> Multi-pass optimization <strong>Rationale:</strong></p><ul><li>Better optimization opportunities</li><li>Clear separation of concerns</li><li>Maintainable code</li></ul><h3 id="_3-error-handling" tabindex="-1">3. Error Handling <a class="header-anchor" href="#_3-error-handling" aria-label="Permalink to &quot;3. Error Handling&quot;">​</a></h3><p><strong>Decision:</strong> Comprehensive error reporting <strong>Rationale:</strong></p><ul><li>Better developer experience</li><li>Easier debugging</li><li>Clear error messages</li></ul><h2 id="limitations" tabindex="-1">Limitations <a class="header-anchor" href="#limitations" aria-label="Permalink to &quot;Limitations&quot;">​</a></h2><ol><li><p><strong>Performance</strong></p><ul><li>Some Racket features may impact performance</li><li>Optimization trade-offs</li><li>Runtime overhead</li></ul></li><li><p><strong>Compatibility</strong></p><ul><li>Not all Racket features supported</li><li>Some Luau features not accessible</li><li>Platform differences</li></ul></li><li><p><strong>Debugging</strong></p><ul><li>Source maps limitations</li><li>Runtime error handling</li><li>Performance profiling</li></ul></li></ol><h2 id="future-directions" tabindex="-1">Future Directions <a class="header-anchor" href="#future-directions" aria-label="Permalink to &quot;Future Directions&quot;">​</a></h2><ol><li><p><strong>Enhanced Type System</strong></p><ul><li>More type features</li><li>Better inference</li><li>Runtime checks</li></ul></li><li><p><strong>Performance Improvements</strong></p><ul><li>Better optimizations</li><li>Reduced overhead</li><li>JIT support</li></ul></li><li><p><strong>Tooling</strong></p><ul><li>Better debugging</li><li>Profiling support</li><li>IDE integration</li></ul></li></ol><h2 id="see-also" tabindex="-1">See Also <a class="header-anchor" href="#see-also" aria-label="Permalink to &quot;See Also&quot;">​</a></h2><ul><li><a href="./../explanation/compilation.html">Compilation Process</a></li><li><a href="./../explanation/type-system.html">Type System</a></li><li><a href="./../reference/config.html">Configuration Reference</a></li></ul>`,43)]))}const g=i(r,[["render",n]]);export{u as __pageData,g as default};
