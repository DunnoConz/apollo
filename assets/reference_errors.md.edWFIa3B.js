import{_ as i,c as a,o as e,ae as t}from"./chunks/framework.cCdmFsMI.js";const c=JSON.parse('{"title":"Error Messages Reference","description":"","frontmatter":{},"headers":[],"relativePath":"reference/errors.md","filePath":"reference/errors.md"}'),n={name:"reference/errors.md"};function l(r,s,h,p,o,k){return e(),a("div",null,s[0]||(s[0]=[t('<h1 id="error-messages-reference" tabindex="-1">Error Messages Reference <a class="header-anchor" href="#error-messages-reference" aria-label="Permalink to &quot;Error Messages Reference&quot;">​</a></h1><p>This document lists and explains common error messages in Apollo.</p><h2 id="compilation-errors" tabindex="-1">Compilation Errors <a class="header-anchor" href="#compilation-errors" aria-label="Permalink to &quot;Compilation Errors&quot;">​</a></h2><h3 id="type-errors" tabindex="-1">Type Errors <a class="header-anchor" href="#type-errors" aria-label="Permalink to &quot;Type Errors&quot;">​</a></h3><h4 id="type-mismatch-expected-x-got-y" tabindex="-1"><code>Type mismatch: expected X, got Y</code> <a class="header-anchor" href="#type-mismatch-expected-x-got-y" aria-label="Permalink to &quot;`Type mismatch: expected X, got Y`&quot;">​</a></h4><p><strong>Example:</strong></p><div class="language-racket vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">racket</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">define</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> x</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x y))</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(add </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; Error: Type mismatch: expected number, got string</span></span></code></pre></div><p><strong>Solution:</strong></p><ul><li>Check the types of your arguments</li><li>Add type annotations if needed</li><li>Use type conversion functions if appropriate</li></ul><h4 id="undefined-identifier-x" tabindex="-1"><code>Undefined identifier: X</code> <a class="header-anchor" href="#undefined-identifier-x" aria-label="Permalink to &quot;`Undefined identifier: X`&quot;">​</a></h4><p><strong>Example:</strong></p><div class="language-racket vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">racket</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; Error: Undefined identifier: x</span></span></code></pre></div><p><strong>Solution:</strong></p><ul><li>Define the variable before using it</li><li>Check for typos in variable names</li><li>Ensure the identifier is in scope</li></ul><h3 id="syntax-errors" tabindex="-1">Syntax Errors <a class="header-anchor" href="#syntax-errors" aria-label="Permalink to &quot;Syntax Errors&quot;">​</a></h3><h4 id="invalid-syntax-at-line-x" tabindex="-1"><code>Invalid syntax at line X</code> <a class="header-anchor" href="#invalid-syntax-at-line-x" aria-label="Permalink to &quot;`Invalid syntax at line X`&quot;">​</a></h4><p><strong>Example:</strong></p><div class="language-racket vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">racket</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">define</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  ; Missing closing parenthesis</span></span></code></pre></div><p><strong>Solution:</strong></p><ul><li>Check for matching parentheses</li><li>Verify proper indentation</li><li>Ensure proper syntax for special forms</li></ul><h4 id="unexpected-token-x" tabindex="-1"><code>Unexpected token: X</code> <a class="header-anchor" href="#unexpected-token-x" aria-label="Permalink to &quot;`Unexpected token: X`&quot;">​</a></h4><p><strong>Example:</strong></p><div class="language-racket vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">racket</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">define</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; Error: Unexpected token: @</span></span></code></pre></div><p><strong>Solution:</strong></p><ul><li>Check for invalid characters</li><li>Verify proper syntax for the language construct</li><li>Remove or replace invalid tokens</li></ul><h2 id="runtime-errors" tabindex="-1">Runtime Errors <a class="header-anchor" href="#runtime-errors" aria-label="Permalink to &quot;Runtime Errors&quot;">​</a></h2><h3 id="division-by-zero" tabindex="-1"><code>Division by zero</code> <a class="header-anchor" href="#division-by-zero" aria-label="Permalink to &quot;`Division by zero`&quot;">​</a></h3><p><strong>Example:</strong></p><div class="language-racket vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">racket</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; Error: Division by zero</span></span></code></pre></div><p><strong>Solution:</strong></p><ul><li>Add checks for zero denominators</li><li>Use contracts to prevent zero values</li><li>Handle the error case appropriately</li></ul><h3 id="index-out-of-bounds" tabindex="-1"><code>Index out of bounds</code> <a class="header-anchor" href="#index-out-of-bounds" aria-label="Permalink to &quot;`Index out of bounds`&quot;">​</a></h3><p><strong>Example:</strong></p><div class="language-racket vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">racket</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">vector-ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">vector</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; Error: Index out of bounds</span></span></code></pre></div><p><strong>Solution:</strong></p><ul><li>Check array bounds before access</li><li>Use safe access functions</li><li>Add bounds checking</li></ul><h2 id="macro-errors" tabindex="-1">Macro Errors <a class="header-anchor" href="#macro-errors" aria-label="Permalink to &quot;Macro Errors&quot;">​</a></h2><h3 id="macro-expansion-failed" tabindex="-1"><code>Macro expansion failed</code> <a class="header-anchor" href="#macro-expansion-failed" aria-label="Permalink to &quot;`Macro expansion failed`&quot;">​</a></h3><p><strong>Example:</strong></p><div class="language-racket vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">racket</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">define-syntax-rule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (twice x) (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">begin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x x))</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(twice)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; Error: Macro expansion failed: missing argument</span></span></code></pre></div><p><strong>Solution:</strong></p><ul><li>Check macro argument count</li><li>Verify macro pattern matching</li><li>Ensure proper syntax in macro body</li></ul><h3 id="invalid-macro-pattern" tabindex="-1"><code>Invalid macro pattern</code> <a class="header-anchor" href="#invalid-macro-pattern" aria-label="Permalink to &quot;`Invalid macro pattern`&quot;">​</a></h3><p><strong>Example:</strong></p><div class="language-racket vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">racket</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">define-syntax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bad-macro</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> stx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">syntax-case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stx ()</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x y) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x)]))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; Error: Invalid macro pattern</span></span></code></pre></div><p><strong>Solution:</strong></p><ul><li>Check macro pattern syntax</li><li>Ensure all pattern variables are used</li><li>Verify macro expansion result</li></ul><h2 id="best-practices" tabindex="-1">Best Practices <a class="header-anchor" href="#best-practices" aria-label="Permalink to &quot;Best Practices&quot;">​</a></h2><ol><li><p>Enable verbose output for detailed error messages:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apollo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compile</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> program.rkt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span></code></pre></div></li><li><p>Use type annotations to catch errors early:</p><div class="language-racket vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">racket</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> typed/racket</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(: add (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Number Number Number))</span></span></code></pre></div></li><li><p>Add contracts for runtime checking:</p><div class="language-racket vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">racket</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> racket/contract)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">define/contract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (safe-divide x y)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">not/c</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> zero?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">number?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x y))</span></span></code></pre></div></li></ol><h2 id="see-also" tabindex="-1">See Also <a class="header-anchor" href="#see-also" aria-label="Permalink to &quot;See Also&quot;">​</a></h2><ul><li><a href="./../how-to/debugging.html">Debugging Guide</a></li><li><a href="./../explanation/type-system.html">Type System</a></li></ul>',51)]))}const g=i(n,[["render",l]]);export{c as __pageData,g as default};
