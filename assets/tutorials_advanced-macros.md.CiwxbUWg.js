import{_ as i,c as a,o as n,ae as t}from"./chunks/framework.cCdmFsMI.js";const c=JSON.parse('{"title":"Advanced Macro Patterns","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/advanced-macros.md","filePath":"tutorials/advanced-macros.md"}'),h={name:"tutorials/advanced-macros.md"};function e(l,s,k,p,r,E){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="advanced-macro-patterns" tabindex="-1">Advanced Macro Patterns <a class="header-anchor" href="#advanced-macro-patterns" aria-label="Permalink to &quot;Advanced Macro Patterns&quot;">​</a></h1><p>This tutorial covers advanced Racket macro patterns supported by Apollo.</p><h2 id="complex-pattern-matching" tabindex="-1">Complex Pattern Matching <a class="header-anchor" href="#complex-pattern-matching" aria-label="Permalink to &quot;Complex Pattern Matching&quot;">​</a></h2><h3 id="nested-patterns" tabindex="-1">Nested Patterns <a class="header-anchor" href="#nested-patterns" aria-label="Permalink to &quot;Nested Patterns&quot;">​</a></h3><div class="language-racket vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">racket</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">define-syntax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">complex-match</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> stx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">syntax-case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stx ()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (pattern </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) body </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     #&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">match-let*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ([pattern </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    [result (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">begin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         result)]))</span></span></code></pre></div><h3 id="recursive-patterns" tabindex="-1">Recursive Patterns <a class="header-anchor" href="#recursive-patterns" aria-label="Permalink to &quot;Recursive Patterns&quot;">​</a></h3><div class="language-racket vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">racket</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">define-syntax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">recursive-macro</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> stx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">syntax-case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stx ()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> base) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">base]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (op arg </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     #&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op (recursive-macro arg) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]))</span></span></code></pre></div><h2 id="macro-composition" tabindex="-1">Macro Composition <a class="header-anchor" href="#macro-composition" aria-label="Permalink to &quot;Macro Composition&quot;">​</a></h2><h3 id="combining-macros" tabindex="-1">Combining Macros <a class="header-anchor" href="#combining-macros" aria-label="Permalink to &quot;Combining Macros&quot;">​</a></h3><div class="language-racket vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">racket</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">define-syntax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">composed-macro</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> stx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">syntax-case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stx ()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> expr)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">with-syntax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ([transformed (transform </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expr)])</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       #&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(another-macro transformed))]))</span></span></code></pre></div><h3 id="macro-generators" tabindex="-1">Macro Generators <a class="header-anchor" href="#macro-generators" aria-label="Permalink to &quot;Macro Generators&quot;">​</a></h3><div class="language-racket vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">racket</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">define-syntax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generate-macros</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> stx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">syntax-case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stx ()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     #&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">begin</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">define-syntax</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           (make-macro-transformer </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]))</span></span></code></pre></div><h2 id="advanced-techniques" tabindex="-1">Advanced Techniques <a class="header-anchor" href="#advanced-techniques" aria-label="Permalink to &quot;Advanced Techniques&quot;">​</a></h2><h3 id="hygiene" tabindex="-1">Hygiene <a class="header-anchor" href="#hygiene" aria-label="Permalink to &quot;Hygiene&quot;">​</a></h3><div class="language-racket vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">racket</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">define-syntax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hygienic-macro</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> stx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">syntax-case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stx ()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">with-syntax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ([tmp (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">datum-&gt;syntax</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> #&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">here </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tmp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)])</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       #&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ([tmp </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           body </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))]))</span></span></code></pre></div><h3 id="syntax-objects" tabindex="-1">Syntax Objects <a class="header-anchor" href="#syntax-objects" aria-label="Permalink to &quot;Syntax Objects&quot;">​</a></h3><div class="language-racket vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">racket</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">define-syntax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">syntax-object-macro</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> stx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">syntax-case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stx ()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> expr)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">with-syntax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ([line (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">syntax-line</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> #&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expr)]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                   [col (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">syntax-column</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> #&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expr)])</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       #&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> line col expr))]))</span></span></code></pre></div><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><h3 id="custom-control-flow" tabindex="-1">Custom Control Flow <a class="header-anchor" href="#custom-control-flow" aria-label="Permalink to &quot;Custom Control Flow&quot;">​</a></h3><div class="language-racket vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">racket</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">define-syntax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">custom-if</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> stx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">syntax-case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stx ()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> test then </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     #&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cond</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         [test then]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">else</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])]))</span></span></code></pre></div><h3 id="domain-specific-syntax" tabindex="-1">Domain-Specific Syntax <a class="header-anchor" href="#domain-specific-syntax" aria-label="Permalink to &quot;Domain-Specific Syntax&quot;">​</a></h3><div class="language-racket vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">racket</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">define-syntax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dsl-macro</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> stx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">syntax-case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stx ()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (command args </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     #&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process-command </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> args </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]))</span></span></code></pre></div><h2 id="best-practices" tabindex="-1">Best Practices <a class="header-anchor" href="#best-practices" aria-label="Permalink to &quot;Best Practices&quot;">​</a></h2><ol><li><p><strong>Maintainability</strong></p><ul><li>Keep macros focused</li><li>Document behavior</li><li>Test edge cases</li></ul></li><li><p><strong>Performance</strong></p><ul><li>Avoid unnecessary expansion</li><li>Use appropriate patterns</li><li>Consider compilation time</li></ul></li></ol><h2 id="see-also" tabindex="-1">See Also <a class="header-anchor" href="#see-also" aria-label="Permalink to &quot;See Also&quot;">​</a></h2><ul><li><a href="./../reference/macros.html">Macro Reference</a></li><li><a href="./../how-to/macros.html">Using Macros</a></li></ul>`,26)]))}const o=i(h,[["render",e]]);export{c as __pageData,o as default};
